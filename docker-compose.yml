# ==============================================
# Docker Compose for Cibozer
# Provides both development and production configurations
# ==============================================

version: '3.8'

services:
  # ==============================================
  # Web Application Service
  # ==============================================
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-latest}
        VCS_REF: ${VCS_REF:-}
    container_name: cibozer_web
    restart: unless-stopped
    ports:
      - "${PORT:-5000}:5000"
    environment:
      # Core application
      - FLASK_ENV=${FLASK_ENV:-production}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG:-False}
      
      # Database
      - DATABASE_URL=${DATABASE_URL}
      
      # Email configuration
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USE_TLS=${MAIL_USE_TLS:-True}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_DEFAULT_SENDER=${MAIL_DEFAULT_SENDER}
      
      # Stripe payments
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_PRICE_ID_PRO=${STRIPE_PRICE_ID_PRO}
      - STRIPE_PRICE_ID_PREMIUM=${STRIPE_PRICE_ID_PREMIUM}
      
      # Admin configuration
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      
      # Optional services
      - REDIS_URL=${REDIS_URL:-}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      
      # Security
      - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE:-True}
      - SESSION_COOKIE_HTTPONLY=${SESSION_COOKIE_HTTPONLY:-True}
      - SESSION_COOKIE_SAMESITE=${SESSION_COOKIE_SAMESITE:-Strict}
      
      # Logging
      - LOG_TO_STDOUT=${LOG_TO_STDOUT:-True}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    
    volumes:
      # Persistent data directories
      - cibozer_uploads:/app/static/uploads
      - cibozer_pdfs:/app/static/pdfs
      - cibozer_videos:/app/static/videos
      - cibozer_logs:/app/logs
      - cibozer_backups:/app/backups
    
    networks:
      - cibozer_network
    
    depends_on:
      - redis
    
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cibozer.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.cibozer.tls=true"
      - "traefik.http.routers.cibozer.tls.certresolver=letsencrypt"

  # ==============================================
  # Redis Service (for caching and rate limiting)
  # ==============================================
  redis:
    image: redis:7-alpine
    container_name: cibozer_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - cibozer_redis_data:/data
    networks:
      - cibozer_network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # Database Service (for development)
  # ==============================================
  postgres:
    image: postgres:15-alpine
    container_name: cibozer_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-cibozer}
      - POSTGRES_USER=${POSTGRES_USER:-cibozer}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_change_me}
    ports:
      - "5432:5432"
    volumes:
      - cibozer_postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
    networks:
      - cibozer_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cibozer}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # Nginx Reverse Proxy (for production)
  # ==============================================
  nginx:
    image: nginx:alpine
    container_name: cibozer_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - cibozer_uploads:/var/www/uploads:ro
      - cibozer_pdfs:/var/www/pdfs:ro
    networks:
      - cibozer_network
    depends_on:
      - web
    profiles:
      - production

# ==============================================
# Volumes for persistent data
# ==============================================
volumes:
  cibozer_postgres_data:
    driver: local
  cibozer_redis_data:
    driver: local
  cibozer_uploads:
    driver: local
  cibozer_pdfs:
    driver: local
  cibozer_videos:
    driver: local
  cibozer_logs:
    driver: local
  cibozer_backups:
    driver: local

# ==============================================
# Networks
# ==============================================
networks:
  cibozer_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16