<<<<<<< Updated upstream
# Project Context - Cibozer v4.1
=======
# Project Context - Cibozer
>>>>>>> Stashed changes
STACK="Python/Flask"
TEST_CMD="python -m pytest"
BUILD_CMD="pip install -r requirements.txt"
COVERAGE_CMD="python -m pytest --cov=. --cov-report=term-missing"
AUDIT_CMD="pip-audit"
FILE_PATTERN="*.py"
TEST_FAIL_PATTERN="FAILED|AssertionError|Exception|ERROR"
TEST_PASS_PATTERN="passed|PASSED"
COVERAGE_PATTERN="[0-9]+%"
LINT_CMD="python -m flake8 . --max-line-length=120 --exclude=venv,.git,__pycache__"
<<<<<<< Updated upstream

# Project Context - Cibozer v4.1
*Last Updated: Iteration 41 - Architecture Review*

## 🏗️ System Architecture Overview
Cibozer is an AI-powered meal planning SaaS platform built with Python/Flask, designed for scalable health-focused meal optimization and social media content generation.

## 🔧 Technical Stack
- **Backend**: Python 3.12 + Flask 2.3.3 + SQLAlchemy
- **Database**: SQLite (development) → PostgreSQL (production ready)
- **Frontend**: Bootstrap 5.3 + Vanilla JS + Jinja2 templating
- **Authentication**: Flask-Login + Werkzeug security
- **Testing**: pytest + pytest-cov + pytest-flask
- **Deployment**: Gunicorn, Railway/Render/Vercel ready
- **AI Integration**: OpenAI API for meal optimization
- **Video Generation**: Edge TTS + video processing pipeline

## 📁 Core Architecture Components

### Main Application Files
- **app.py** - Flask application factory and route definitions
- **models.py** - SQLAlchemy database models (User, PricingPlan, etc.)
- **auth.py** - Authentication blueprints and security logic
- **payments.py** - Stripe integration and credit management
- **meal_optimizer.py** - Core AI meal planning engine
- **video_service.py** - Video generation and social media upload
- **app_config.py** - Centralized configuration management

### Key Infrastructure
- **logging_setup.py** - Structured JSON logging system
- **middleware.py** - Request validation and security middleware
- **utils/security.py** - Security utilities and validators
- **migrations/** - Database migration scripts

### Frontend Structure
- **templates/** - Jinja2 HTML templates with Bootstrap UI
- **static/css/** - Responsive CSS with mobile-first design
- **static/js/** - Progressive enhancement JavaScript
- **static/generated/** - Dynamic content and video files

## 🧪 Testing Architecture
- **tests/** - Comprehensive test suite (183+ test files)
- **conftest.py** - Shared test fixtures and configuration
- **Core test categories**: auth, payments, api, integration, security

## 🔄 Deployment & DevOps
- **Multi-platform deployment**: Railway, Render, Vercel configurations
- **Environment management**: Development, staging, production configs
- **Performance monitoring**: Baseline tracking and metrics collection
- **Security scanning**: Automated vulnerability assessment

## ⚙️ Build & Development Commands
```bash
# Core Commands

# Development
python run.py                    # Development server
python start_dev.py             # Development with auto-reload
python scripts/setup_admin.py   # Create admin user

# Production
gunicorn app:app                # Production WSGI server
python scripts/setup_production.py  # Production setup
```

## 📊 File Patterns & Conventions
```bash
```

## 🎯 Key Features Architecture
- **AI Meal Planning**: Calorie-targeted, dietary preference aware
- **Video Generation**: Automated social media content creation
- **PDF Export**: Professional meal plan documents
- **Credit System**: Usage-based pricing with Stripe integration
- **Admin Dashboard**: User management and analytics
- **Share Features**: Secure meal plan sharing
- **Mobile-First UI**: Responsive design for all devices

## 🔐 Security Features
- **Rate Limiting**: Automated brute-force protection
- **CSRF Protection**: Flask-WTF token validation
- **Input Sanitization**: Comprehensive data validation
- **Password Security**: bcrypt hashing with complexity requirements
- **Session Management**: Secure Flask-Login implementation
- **Audit Logging**: Comprehensive security event tracking

## 📈 Performance & Monitoring
- **Lazy Loading**: Deferred initialization of heavy services
- **Caching Strategy**: Optimized for meal plan generation
- **Error Tracking**: Structured logging with JSON format
- **Performance Baselines**: Automated performance regression detection
- **Health Checks**: Comprehensive system status monitoring

## 🚀 Architecture Strengths
1. **Modular Design**: Clear separation of concerns with Flask blueprints
2. **Scalable Foundation**: Multi-deployment platform support
3. **Security First**: Comprehensive security measures throughout
4. **Test Coverage**: Extensive automated testing strategy
5. **Performance Optimized**: Lazy loading and efficient algorithms
6. **User-Centric**: Mobile-first, accessible design patterns

## 🔄 Continuous Evolution
- **APEX System**: Automated codebase evolution and health monitoring
- **Iterative Improvement**: Regular architecture and code quality reviews
- **Performance Tracking**: Baseline maintenance and regression prevention
- **Security Updates**: Regular vulnerability assessments and fixes
=======
>>>>>>> Stashed changes
