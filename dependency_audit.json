{"dependencies": [{"name": "aiohappyeyeballs", "version": "2.6.1", "vulns": []}, {"name": "aiohttp", "version": "3.12.14", "vulns": []}, {"name": "aiosignal", "version": "1.4.0", "vulns": []}, {"name": "alembic", "version": "1.16.4", "vulns": []}, {"name": "anaconda-anon-usage", "skip_reason": "Dependency not found on PyPI and could not be audited: anaconda-anon-usage (0.4.4)"}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anyio", "version": "4.7.0", "vulns": []}, {"name": "appdirs", "version": "1.4.4", "vulns": []}, {"name": "archspec", "version": "0.2.3", "vulns": []}, {"name": "attrs", "version": "25.3.0", "vulns": []}, {"name": "audioread", "version": "3.0.1", "vulns": []}, {"name": "authlib", "version": "1.6.0", "vulns": []}, {"name": "av", "version": "13.1.0", "vulns": []}, {"name": "bcrypt", "version": "4.3.0", "vulns": []}, {"name": "beautifulsoup4", "version": "4.12.3", "vulns": []}, {"name": "blinker", "version": "1.9.0", "vulns": []}, {"name": "boltons", "version": "23.0.0", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "bottleneck", "version": "1.3.7", "vulns": []}, {"name": "brotli", "version": "1.0.9", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "cachetools", "version": "5.5.2", "vulns": []}, {"name": "certifi", "version": "2025.6.15", "vulns": []}, {"name": "cffi", "version": "1.16.0", "vulns": []}, {"name": "chardet", "version": "5.2.0", "vulns": []}, {"name": "charset-normalizer", "version": "3.3.2", "vulns": []}, {"name": "click", "version": "8.1.8", "vulns": []}, {"name": "cloup", "version": "3.0.6", "vulns": []}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "comtypes", "version": "1.4.11", "vulns": []}, {"name": "conda", "skip_reason": "Dependency not found on PyPI and could not be audited: conda (25.3.0)"}, {"name": "conda-content-trust", "skip_reason": "Dependency not found on PyPI and could not be audited: conda-content-trust (0.2.0)"}, {"name": "conda-libmamba-solver", "skip_reason": "Dependency not found on PyPI and could not be audited: conda-libmamba-solver (24.7.0)"}, {"name": "conda-package-handling", "version": "2.3.0", "vulns": []}, {"name": "conda-package-streaming", "version": "0.10.0", "vulns": []}, {"name": "contourpy", "version": "1.2.0", "vulns": []}, {"name": "coverage", "version": "7.9.2", "vulns": []}, {"name": "cryptography", "version": "42.0.5", "vulns": [{"id": "GHSA-h4gh-qq45-vh27", "fix_versions": ["43.0.1"], "aliases": [], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 37.0.0-43.0.0 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://openssl-library.org/news/secadv/20240903.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions. "}, {"id": "GHSA-79v4-65xg-pq4g", "fix_versions": ["44.0.1"], "aliases": ["CVE-2024-12797"], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 42.0.0-44.0.0 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://openssl-library.org/news/secadv/20250211.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions."}]}, {"name": "cycler", "version": "0.11.0", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "dataclasses", "version": "0.8", "vulns": []}, {"name": "decorator", "version": "5.2.1", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "distro", "version": "1.9.0", "vulns": []}, {"name": "dparse", "version": "0.6.4", "vulns": []}, {"name": "ebooklib", "version": "0.17", "vulns": []}, {"name": "edge-tts", "version": "7.0.2", "vulns": []}, {"name": "et-xmlfile", "version": "1.1.0", "vulns": []}, {"name": "exceptiongroup", "version": "1.2.2", "vulns": []}, {"name": "filelock", "version": "3.16.1", "vulns": []}, {"name": "flask", "version": "3.1.1", "vulns": []}, {"name": "flask-cors", "version": "6.0.1", "vulns": []}, {"name": "flask-login", "version": "0.6.3", "vulns": []}, {"name": "flask-migrate", "version": "4.1.0", "vulns": []}, {"name": "flask-sqlalchemy", "version": "3.1.1", "vulns": []}, {"name": "flask-wtf", "version": "1.2.1", "vulns": []}, {"name": "fonttools", "version": "4.51.0", "vulns": []}, {"name": "frozendict", "version": "2.4.2", "vulns": []}, {"name": "frozenlist", "version": "1.7.0", "vulns": []}, {"name": "glcontext", "version": "3.0.0", "vulns": []}, {"name": "google-api-core", "version": "2.25.1", "vulns": []}, {"name": "google-api-python-client", "version": "2.176.0", "vulns": []}, {"name": "google-auth", "version": "2.40.3", "vulns": []}, {"name": "google-auth-httplib2", "version": "0.2.0", "vulns": []}, {"name": "google-auth-oauthlib", "version": "1.2.2", "vulns": []}, {"name": "googleapis-common-protos", "version": "1.70.0", "vulns": []}, {"name": "greenlet", "version": "3.2.3", "vulns": []}, {"name": "gtts", "version": "2.5.4", "vulns": []}, {"name": "h11", "version": "0.14.0", "vulns": [{"id": "GHSA-vqfr-h8mv-ghfj", "fix_versions": ["0.16.0"], "aliases": ["CVE-2025-43859"], "description": "### Impact  A leniency in h11's parsing of line terminators in chunked-coding message bodies can lead to request smuggling vulnerabilities under certain conditions.  ### Details  HTTP/1.1 Chunked-Encoding bodies are formatted as a sequence of \"chunks\", each of which consists of:  - chunk length - `\\r\\n` - `length` bytes of content - `\\r\\n`  In versions of h11 up to 0.14.0, h11 instead parsed them as:  - chunk length - `\\r\\n` - `length` bytes of content - any two bytes  i.e. it did not validate that the trailing `\\r\\n` bytes were correct, and if you put 2 bytes of garbage there it would be accepted, instead of correctly rejecting the body as malformed.  By itself this is harmless. However, suppose you have a proxy or reverse-proxy that tries to analyze HTTP requests, and your proxy has a _different_ bug in parsing Chunked-Encoding, acting as if the format is:  - chunk length - `\\r\\n` - `length` bytes of content - more bytes of content, as many as it takes until you find a `\\r\\n`  For example, [pound](https://github.com/graygnuorg/pound/pull/43) had this bug -- it can happen if an implementer uses a generic \"read until end of line\" helper to consumes the trailing `\\r\\n`.  In this case, h11 and your proxy may both accept the same stream of bytes, but interpret them differently. For example, consider the following HTTP request(s) (assume all line breaks are `\\r\\n`):  ``` GET /one HTTP/1.1 Host: localhost Transfer-Encoding: chunked  5 AAAAAXX2 45 0  GET /two HTTP/1.1 Host: localhost Transfer-Encoding: chunked  0 ```  Here h11 will interpret it as two requests, one with body `AAAAA45` and one with an empty body, while our hypothetical buggy proxy will interpret it as a single request, with body `AAAAXX20\\r\\n\\r\\nGET /two ...`. And any time two HTTP processors both accept the same string of bytes but interpret them differently, you have the conditions for a \"request smuggling\" attack. For example, if `/two` is a dangerous endpoint and the job of the reverse proxy is to stop requests from getting there, then an attacker could use a bytestream like the above to circumvent this protection.  Even worse, if our buggy reverse proxy receives two requests from different users:  ``` GET /one HTTP/1.1 Host: localhost Transfer-Encoding: chunked  5 AAAAAXX999 0 ```  ``` GET /two HTTP/1.1 Host: localhost Cookie: SESSION_KEY=abcdef... ```  ...it will consider the first request to be complete and valid, and send both on to the h11-based web server over the same socket. The server will then see the two concatenated requests, and interpret them as _one_ request to `/one` whose body includes `/two`'s session key, potentially allowing one user to steal another's credentials.  ### Patches  Fixed in h11 0.15.0.  ### Workarounds  Since exploitation requires the combination of buggy h11 with a buggy (reverse) proxy, fixing either component is sufficient to mitigate this issue.  ### Credits  Reported by Jeppe Bonde Weikop on 2025-01-09."}]}, {"name": "h2", "version": "4.2.0", "vulns": []}, {"name": "hpack", "version": "4.1.0", "vulns": []}, {"name": "html5lib", "version": "1.1", "vulns": []}, {"name": "httpcore", "version": "1.0.7", "vulns": []}, {"name": "httplib2", "version": "0.22.0", "vulns": []}, {"name": "httpx", "version": "0.28.1", "vulns": []}, {"name": "hyperframe", "version": "6.1.0", "vulns": []}, {"name": "idna", "version": "3.7", "vulns": []}, {"name": "imageio", "version": "2.37.0", "vulns": []}, {"name": "imageio-ffmpeg", "version": "0.6.0", "vulns": []}, {"name": "importlib-metadata", "version": "8.7.0", "vulns": []}, {"name": "iniconfig", "version": "2.1.0", "vulns": []}, {"name": "isosurfaces", "version": "0.1.2", "vulns": []}, {"name": "itsdangerous", "version": "2.2.0", "vulns": []}, {"name": "jinja2", "version": "3.1.6", "vulns": []}, {"name": "jiter", "version": "0.8.2", "vulns": []}, {"name": "joblib", "version": "1.4.2", "vulns": []}, {"name": "jsonpatch", "version": "1.33", "vulns": []}, {"name": "jsonpickle", "version": "4.0.2", "vulns": []}, {"name": "jsonpointer", "version": "2.1", "vulns": []}, {"name": "kiwisolver", "version": "1.4.4", "vulns": []}, {"name": "lazy-loader", "version": "0.4", "vulns": []}, {"name": "libmambapy", "skip_reason": "Dependency not found on PyPI and could not be audited: libmambapy (1.5.8)"}, {"name": "librosa", "version": "0.11.0", "vulns": []}, {"name": "license-expression", "version": "30.4.3", "vulns": []}, {"name": "llvmlite", "version": "0.44.0", "vulns": []}, {"name": "lxml", "version": "5.2.1", "vulns": []}, {"name": "mako", "version": "1.3.10", "vulns": []}, {"name": "manim", "version": "0.19.0", "vulns": []}, {"name": "manimpango", "version": "0.6.0", "vulns": []}, {"name": "mapbox-earcut", "version": "1.0.3", "vulns": []}, {"name": "markdown-it-py", "version": "3.0.0", "vulns": []}, {"name": "markupsafe", "version": "3.0.2", "vulns": []}, {"name": "marshmallow", "version": "4.0.0", "vulns": []}, {"name": "matplotlib", "version": "3.9.2", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "menuinst", "skip_reason": "Dependency not found on PyPI and could not be audited: menuinst (2.1.1)"}, {"name": "mkl-fft", "version": "1.3.8", "vulns": []}, {"name": "mkl-random", "version": "1.2.4", "vulns": []}, {"name": "mkl-service", "version": "2.4.0", "vulns": []}, {"name": "moderngl", "version": "5.12.0", "vulns": []}, {"name": "moderngl-window", "version": "3.1.1", "vulns": []}, {"name": "more-itertools", "version": "10.6.0", "vulns": []}, {"name": "moviepy", "version": "2.2.1", "vulns": []}, {"name": "msgpack", "version": "1.1.1", "vulns": []}, {"name": "multidict", "version": "6.6.3", "vulns": []}, {"name": "multitasking", "version": "0.0.11", "vulns": []}, {"name": "music21", "version": "9.5.0", "vulns": []}, {"name": "networkx", "version": "3.3", "vulns": []}, {"name": "nltk", "version": "3.9.1", "vulns": []}, {"name": "numba", "version": "0.61.2", "vulns": []}, {"name": "numexpr", "version": "2.8.7", "vulns": []}, {"name": "numpy", "version": "1.26.4", "vulns": []}, {"name": "oauthlib", "version": "3.3.1", "vulns": []}, {"name": "openai", "version": "1.58.1", "vulns": []}, {"name": "opencv-python", "version": "4.11.0.86", "vulns": []}, {"name": "openpyxl", "version": "3.1.5", "vulns": []}, {"name": "packageurl-python", "version": "0.17.1", "vulns": []}, {"name": "packaging", "version": "24.1", "vulns": []}, {"name": "pandas", "version": "2.2.2", "vulns": []}, {"name": "pdf2image", "version": "1.17.0", "vulns": []}, {"name": "peewee", "version": "3.17.6", "vulns": []}, {"name": "pillow", "version": "11.3.0", "vulns": []}, {"name": "pip", "version": "25.1.1", "vulns": []}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "platformdirs", "version": "4.3.8", "vulns": []}, {"name": "pluggy", "version": "1.6.0", "vulns": []}, {"name": "ply", "version": "3.11", "vulns": []}, {"name": "pooch", "version": "1.8.2", "vulns": []}, {"name": "proglog", "version": "0.1.11", "vulns": []}, {"name": "propcache", "version": "0.3.2", "vulns": []}, {"name": "proto-plus", "version": "1.26.1", "vulns": []}, {"name": "protobuf", "version": "6.31.1", "vulns": []}, {"name": "psutil", "version": "6.1.1", "vulns": []}, {"name": "pulp", "version": "2.9.0", "vulns": []}, {"name": "py-serializable", "version": "2.0.0", "vulns": []}, {"name": "pyasn1", "version": "0.6.1", "vulns": []}, {"name": "pyasn1-modules", "version": "0.4.2", "vulns": []}, {"name": "pycairo", "version": "1.27.0", "vulns": []}, {"name": "pycosat", "version": "0.6.6", "vulns": []}, {"name": "pycparser", "version": "2.21", "vulns": []}, {"name": "pydantic", "version": "2.10.6", "vulns": []}, {"name": "pydantic-core", "version": "2.23.4", "vulns": []}, {"name": "pydub", "version": "0.25.1", "vulns": []}, {"name": "pygame", "version": "2.6.1", "vulns": []}, {"name": "pyglet", "version": "2.1.3", "vulns": []}, {"name": "pyglm", "version": "2.8.0", "vulns": []}, {"name": "pygments", "version": "2.19.1", "vulns": []}, {"name": "pymupdf", "version": "1.25.3", "vulns": []}, {"name": "pyparsing", "version": "3.0.9", "vulns": []}, {"name": "pypdf", "version": "5.3.0", "vulns": []}, {"name": "pypdf2", "version": "3.0.1", "vulns": []}, {"name": "pypiwin32", "version": "223", "vulns": []}, {"name": "pyqt5", "version": "5.15.10", "vulns": []}, {"name": "pyqt5-sip", "version": "12.13.0", "vulns": []}, {"name": "pysocks", "version": "1.7.1", "vulns": []}, {"name": "pytest", "version": "8.4.1", "vulns": []}, {"name": "pytest-asyncio", "version": "1.1.0", "vulns": []}, {"name": "pytest-cov", "version": "6.2.1", "vulns": []}, {"name": "pytest-flask", "version": "1.3.0", "vulns": []}, {"name": "python-dateutil", "version": "2.9.0.post0", "vulns": []}, {"name": "python-docx", "version": "1.1.2", "vulns": []}, {"name": "python-dotenv", "version": "1.1.1", "vulns": []}, {"name": "python-pptx", "version": "1.0.2", "vulns": []}, {"name": "pyttsx3", "version": "2.98", "vulns": []}, {"name": "pytz", "version": "2024.1", "vulns": []}, {"name": "pywin32", "version": "310", "vulns": []}, {"name": "pyyaml", "version": "6.0.1", "vulns": []}, {"name": "qrcode", "version": "8.0", "vulns": []}, {"name": "regex", "version": "2024.11.6", "vulns": []}, {"name": "reportlab", "version": "4.4.2", "vulns": []}, {"name": "requests", "version": "2.32.3", "vulns": [{"id": "GHSA-9hjg-9r4m-mvj7", "fix_versions": ["2.32.4"], "aliases": ["CVE-2024-47081"], "description": "### Impact  Due to a URL parsing issue, Requests releases prior to 2.32.4 may leak .netrc credentials to third parties for specific maliciously-crafted URLs.  ### Workarounds For older versions of Requests, use of the .netrc file can be disabled with `trust_env=False` on your Requests Session ([docs](https://requests.readthedocs.io/en/latest/api/#requests.Session.trust_env)).  ### References https://github.com/psf/requests/pull/6965 https://seclists.org/fulldisclosure/2025/Jun/2"}]}, {"name": "requests-oauthlib", "version": "2.0.0", "vulns": []}, {"name": "rich", "version": "13.9.4", "vulns": []}, {"name": "rsa", "version": "4.9.1", "vulns": []}, {"name": "ruamel-yaml", "version": "0.17.21", "vulns": []}, {"name": "safety", "version": "3.6.0", "vulns": []}, {"name": "safety-schemas", "version": "0.0.14", "vulns": []}, {"name": "scikit-learn", "version": "1.7.0", "vulns": []}, {"name": "scipy", "version": "1.15.2", "vulns": []}, {"name": "screeninfo", "version": "0.8.1", "vulns": []}, {"name": "seaborn", "version": "0.13.2", "vulns": []}, {"name": "setuptools", "version": "72.1.0", "vulns": [{"id": "PYSEC-2025-49", "fix_versions": ["78.1.1"], "aliases": ["CVE-2025-47273", "GHSA-5rjg-fvgr-3xxf"], "description": "setuptools is a package that allows users to download, build, install, upgrade, and uninstall Python packages. A path traversal vulnerability in `PackageIndex` is present in setuptools prior to version 78.1.1. An attacker would be allowed to write files to arbitrary locations on the filesystem with the permissions of the process running the Python code, which could escalate to remote code execution depending on the context. Version 78.1.1 fixes the issue."}]}, {"name": "shellingham", "version": "1.5.4", "vulns": []}, {"name": "sip", "version": "6.7.12", "vulns": []}, {"name": "six", "version": "1.16.0", "vulns": []}, {"name": "skia-pathops", "version": "0.8.0.post2", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "soundfile", "version": "0.13.1", "vulns": []}, {"name": "soupsieve", "version": "2.5", "vulns": []}, {"name": "soxr", "version": "0.5.0.post1", "vulns": []}, {"name": "sqlalchemy", "version": "2.0.41", "vulns": []}, {"name": "srt", "version": "3.5.3", "vulns": []}, {"name": "standard-aifc", "version": "3.13.0", "vulns": []}, {"name": "standard-sunau", "version": "3.13.0", "vulns": []}, {"name": "stripe", "version": "12.3.0", "vulns": []}, {"name": "svgelements", "version": "1.9.6", "vulns": []}, {"name": "tabulate", "version": "0.9.0", "vulns": []}, {"name": "tenacity", "version": "9.1.2", "vulns": []}, {"name": "threadpoolctl", "version": "3.6.0", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "tomlkit", "version": "0.13.3", "vulns": []}, {"name": "tornado", "version": "6.4.1", "vulns": [{"id": "GHSA-7cx3-6m66-7c5m", "fix_versions": ["6.5"], "aliases": ["CVE-2025-47287"], "description": "### Summary  When Tornado's ``multipart/form-data`` parser encounters certain errors, it logs a warning but continues trying to parse the remainder of the data. This allows remote attackers to generate an extremely high volume of logs, constituting a DoS attack. This DoS is compounded by the fact that the logging subsystem is synchronous.  ### Affected versions  All versions of Tornado prior to 6.5 are affected. The vulnerable parser is enabled by default.  ### Solution  Upgrade to Tornado version 6.5. In the meantime, risk can be mitigated by blocking `Content-Type: multipart/form-data` in a proxy."}, {"id": "GHSA-8w49-h785-mj3c", "fix_versions": ["6.4.2"], "aliases": ["CVE-2024-52804"], "description": "The algorithm used for parsing HTTP cookies in Tornado versions prior to 6.4.2 sometimes has quadratic complexity, leading to excessive CPU consumption when parsing maliciously-crafted cookie headers. This parsing occurs in the event loop thread and may block the processing of other requests.  See also CVE-2024-7592 for a similar vulnerability in cpython."}]}, {"name": "tqdm", "version": "4.67.1", "vulns": []}, {"name": "truststore", "version": "0.8.0", "vulns": []}, {"name": "typer", "version": "0.16.0", "vulns": []}, {"name": "typing-extensions", "version": "4.12.2", "vulns": []}, {"name": "tzdata", "version": "2024.1", "vulns": []}, {"name": "unicodedata2", "version": "15.1.0", "vulns": []}, {"name": "uritemplate", "version": "4.2.0", "vulns": []}, {"name": "urllib3", "version": "2.2.2", "vulns": [{"id": "GHSA-48p4-8xcf-vxj5", "fix_versions": ["2.5.0"], "aliases": ["CVE-2025-50182"], "description": "urllib3 [supports](https://urllib3.readthedocs.io/en/2.4.0/reference/contrib/emscripten.html) being used in a Pyodide runtime utilizing the [JavaScript Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) or falling back on [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest). This means you can use Python libraries to make HTTP requests from your browser or Node.js. Additionally, urllib3 provides [a mechanism](https://urllib3.readthedocs.io/en/2.4.0/user-guide.html#retrying-requests) to control redirects.  However, the `retries` and `redirect` parameters are ignored with Pyodide; the runtime itself determines redirect behavior.   ## Affected usages  Any code which relies on urllib3 to control the number of redirects for an HTTP request in a Pyodide runtime.   ## Impact  Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects may remain vulnerable if a Pyodide runtime redirect mechanism is unsuitable.   ## Remediation  If you use urllib3 in Node.js, upgrade to a patched version of urllib3.  Unfortunately, browsers provide no suitable way which urllib3 can use: `XMLHttpRequest` provides no control over redirects, the Fetch API returns `opaqueredirect` responses lacking data when redirects are controlled manually. Expect default browser behavior for redirects."}, {"id": "GHSA-pq67-6m6q-mj2v", "fix_versions": ["2.5.0"], "aliases": ["CVE-2025-50181"], "description": "urllib3 handles redirects and retries using the same mechanism, which is controlled by the `Retry` object. The most common way to disable redirects is at the request level, as follows:  ```python resp = urllib3.request(\"GET\", \"https://httpbin.org/redirect/1\", redirect=False) print(resp.status) # 302 ```  However, it is also possible to disable redirects, for all requests, by instantiating a `PoolManager` and specifying `retries` in a way that disable redirects:  ```python import urllib3  http = urllib3.PoolManager(retries=0)  # should raise MaxRetryError on redirect http = urllib3.PoolManager(retries=urllib3.Retry(redirect=0))  # equivalent to the above http = urllib3.PoolManager(retries=False)  # should return the first response  resp = http.request(\"GET\", \"https://httpbin.org/redirect/1\") ```  However, the `retries` parameter is currently ignored, which means all the above examples don't disable redirects.  ## Affected usages  Passing `retries` on `PoolManager` instantiation to disable redirects or restrict their number.  By default, requests and botocore users are not affected.  ## Impact  Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable.  ## Remediation  You can remediate this vulnerability with the following steps:   * Upgrade to a patched version of urllib3. If your organization would benefit from the continued support of urllib3 1.x, please contact [sethmichaellarson@gmail.com](mailto:sethmichaellarson@gmail.com) to discuss sponsorship or contribution opportunities.  * Disable redirects at the `request()` level instead of the `PoolManager()` level."}]}, {"name": "watchdog", "version": "6.0.0", "vulns": []}, {"name": "webcolors", "version": "24.11.1", "vulns": []}, {"name": "webencodings", "version": "0.5.1", "vulns": []}, {"name": "werkzeug", "version": "3.1.3", "vulns": []}, {"name": "wheel", "version": "0.43.0", "vulns": []}, {"name": "win-inet-pton", "version": "1.1.0", "vulns": []}, {"name": "wtforms", "version": "3.2.1", "vulns": []}, {"name": "xlsxwriter", "version": "3.2.5", "vulns": []}, {"name": "yarl", "version": "1.20.1", "vulns": []}, {"name": "yfinance", "version": "0.2.51", "vulns": []}, {"name": "zipp", "version": "3.23.0", "vulns": []}, {"name": "zstandard", "version": "0.22.0", "vulns": []}], "fixes": []}
