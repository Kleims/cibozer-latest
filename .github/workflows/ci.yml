name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt
    
    - name: Run Black formatter check
      run: black --check app/ tests/
    
    - name: Run isort import checker
      run: isort --check-only app/ tests/
    
    - name: Run Flake8 linter
      run: flake8 app/ tests/ --max-line-length=120 --extend-ignore=E203,W503
    
    - name: Run MyPy type checker
      run: mypy app/ --ignore-missing-imports
      continue-on-error: true

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit pip-audit
        pip install -r requirements.txt
    
    - name: Run Safety check
      run: safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Run Bandit security linter
      run: bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run pip-audit
      run: pip-audit
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: cibozer_test
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: cibozer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist
    
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://cibozer_test:testpass@localhost:5432/cibozer_test
        SECRET_KEY: test-secret-key-for-ci
        FLASK_ENV: testing
        OPENAI_API_KEY: test-key
        STRIPE_SECRET_KEY: sk_test_mock
        STRIPE_PUBLISHABLE_KEY: pk_test_mock
      run: |
        echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
        echo "SECRET_KEY=$SECRET_KEY" >> $GITHUB_ENV
        echo "FLASK_ENV=$FLASK_ENV" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> $GITHUB_ENV
        echo "STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY" >> $GITHUB_ENV
        echo "STRIPE_PUBLISHABLE_KEY=$STRIPE_PUBLISHABLE_KEY" >> $GITHUB_ENV
    
    - name: Run database migrations
      run: |
        flask db upgrade
    
    - name: Run tests with coverage
      run: |
        pytest tests/ \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --maxfail=5 \
          -n auto \
          -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
    
    - name: Check coverage threshold
      run: |
        coverage report --fail-under=80
        
    - name: Generate coverage badge
      run: |
        coverage-badge -o coverage-badge.svg
      continue-on-error: true

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: cibozer_test
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: cibozer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up integration test environment
      env:
        DATABASE_URL: postgresql://cibozer_test:testpass@localhost:5432/cibozer_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        FLASK_ENV: testing
      run: |
        echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
        echo "REDIS_URL=$REDIS_URL" >> $GITHUB_ENV
        echo "SECRET_KEY=$SECRET_KEY" >> $GITHUB_ENV
        echo "FLASK_ENV=$FLASK_ENV" >> $GITHUB_ENV
    
    - name: Run integration tests
      run: |
        pytest tests/test_integration_e2e.py -v --tb=short

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: Run performance tests
      run: |
        pytest tests/test_performance_load.py -v -k "test_homepage_response_time or test_api_endpoint_response_times"
      continue-on-error: true

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Build Python package
      run: |
        python -m pip install --upgrade pip build
        python -m build
    
    - name: Verify static assets
      run: |
        python minify_js.py
        python scripts/performance_optimizer.py
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          static/js/dist/
          static/dist/

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: cibozer:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        # Test basic import
        docker run --rm cibozer:test python -c "import app; print('App imports successfully')"
        
        # Test container health
        docker run -d --name cibozer-health-test \
          -e SECRET_KEY=test-secret-key \
          -e DATABASE_URL=sqlite:///test.db \
          -e FLASK_ENV=production \
          -p 5001:5000 \
          cibozer:test
        
        sleep 30
        curl -f http://localhost:5001/api/health || exit 1
        docker stop cibozer-health-test
        docker rm cibozer-health-test
    
    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'cibozer:test'
        format: 'sarif'
        output: 'docker-trivy-results.sarif'
      continue-on-error: true

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [lint, security, test, integration-test, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run deployment readiness check
      run: |
        if [ -f deployment_readiness_check.py ]; then
          python deployment_readiness_check.py --ci-mode
        fi
      continue-on-error: true
    
    - name: Validate environment configuration
      run: |
        python config/environments.py validate --environment production
      continue-on-error: true
    
    - name: Generate deployment report
      run: |
        echo "# Deployment Readiness Report" > deployment-report.md
        echo "Generated: $(date)" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "## Test Results" >> deployment-report.md
        echo "- Code Quality: ${{ needs.lint.result == 'success' && '✅ PASSED' || '❌ FAILED' }}" >> deployment-report.md
        echo "- Security Scan: ${{ needs.security.result == 'success' && '✅ PASSED' || '❌ FAILED' }}" >> deployment-report.md
        echo "- Unit Tests: ${{ needs.test.result == 'success' && '✅ PASSED' || '❌ FAILED' }}" >> deployment-report.md
        echo "- Integration Tests: ${{ needs.integration-test.result == 'success' && '✅ PASSED' || '❌ FAILED' }}" >> deployment-report.md
        echo "- Docker Build: ${{ needs.docker-build.result == 'success' && '✅ PASSED' || '❌ FAILED' }}" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "## Deployment Status" >> deployment-report.md
        if [[ "${{ needs.lint.result }}" == "success" && \
              "${{ needs.security.result }}" == "success" && \
              "${{ needs.test.result }}" == "success" && \
              "${{ needs.integration-test.result }}" == "success" && \
              "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "🚢 **READY FOR DEPLOYMENT**" >> deployment-report.md
        else
          echo "⚠️ **NOT READY FOR DEPLOYMENT**" >> deployment-report.md
        fi
    
    - name: Upload deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment-report.md

  notify:
    name: CI Status Notification
    runs-on: ubuntu-latest
    needs: [lint, security, test, integration-test, build, docker-build]
    if: always()
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.lint.result }}" == "success" && \
              "${{ needs.security.result }}" == "success" && \
              "${{ needs.test.result }}" == "success" && \
              "${{ needs.integration-test.result }}" == "success" && \
              "${{ needs.build.result }}" == "success" && \
              "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=All CI checks passed successfully! 🎉" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=Some CI checks failed. Please review the results." >> $GITHUB_OUTPUT
        fi
    
    - name: Summary comment for PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ steps.status.outputs.status }}';
          const message = '${{ steps.status.outputs.message }}';
          
          const body = `## CI Pipeline Results
          
          ${message}
          
          ### Job Results:
          - 🔍 Code Quality: ${{ needs.lint.result == 'success' && '✅ PASSED' || '❌ FAILED' }}
          - 🔒 Security Scan: ${{ needs.security.result == 'success' && '✅ PASSED' || '❌ FAILED' }}
          - 🧪 Unit Tests: ${{ needs.test.result == 'success' && '✅ PASSED' || '❌ FAILED' }}
          - 🔗 Integration Tests: ${{ needs.integration-test.result == 'success' && '✅ PASSED' || '❌ FAILED' }}
          - 📦 Build: ${{ needs.build.result == 'success' && '✅ PASSED' || '❌ FAILED' }}
          - 🐳 Docker Build: ${{ needs.docker-build.result == 'success' && '✅ PASSED' || '❌ FAILED' }}
          
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
    
    - name: Final status check
      run: |
        if [[ "${{ steps.status.outputs.status }}" == "failure" ]]; then
          echo "CI pipeline failed"
          exit 1
        else
          echo "CI pipeline passed successfully"
        fi